[{"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/index.js":"1","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/App.js":"2","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/lib/commerce.js":"3","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/index.js":"4","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Navbar/Navbar.jsx":"5","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Checkout/Checkout.jsx":"6","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Products.jsx":"7","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/Cart.jsx":"8","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Navbar/styles.js":"9","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/styles.js":"10","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/styles.js":"11","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Checkout/styles.js":"12","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/PaymentForm.jsx":"13","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/CartItem/CartItem.jsx":"14","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/AddressForm.jsx":"15","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Product/Product.jsx":"16","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Product/styles.js":"17","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/CartItem/styles.js":"18","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/FormInput.jsx":"19","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Review.jsx":"20","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/ReactPaypal/ReactPaypal.jsx":"21","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/ReactStripe/ReactStripe.jsx":"22"},{"size":149,"mtime":1607763406891,"results":"23","hashOfConfig":"24"},{"size":7757,"mtime":1609242227051,"results":"25","hashOfConfig":"24"},{"size":132,"mtime":1609242535470,"results":"26","hashOfConfig":"24"},{"size":227,"mtime":1608107864663,"results":"27","hashOfConfig":"24"},{"size":1499,"mtime":1608023171300,"results":"28","hashOfConfig":"24"},{"size":4183,"mtime":1609239348416,"results":"29","hashOfConfig":"24"},{"size":740,"mtime":1607933801411,"results":"30","hashOfConfig":"24"},{"size":2123,"mtime":1608649781598,"results":"31","hashOfConfig":"24"},{"size":1631,"mtime":1607770732801,"results":"32","hashOfConfig":"24"},{"size":856,"mtime":1608649948513,"results":"33","hashOfConfig":"24"},{"size":298,"mtime":1607772706472,"results":"34","hashOfConfig":"24"},{"size":1350,"mtime":1608107650025,"results":"35","hashOfConfig":"24"},{"size":3308,"mtime":1609241191168,"results":"36","hashOfConfig":"24"},{"size":1376,"mtime":1608649039520,"results":"37","hashOfConfig":"24"},{"size":5561,"mtime":1608324160096,"results":"38","hashOfConfig":"24"},{"size":1404,"mtime":1608648595150,"results":"39","hashOfConfig":"24"},{"size":786,"mtime":1608648543844,"results":"40","hashOfConfig":"24"},{"size":689,"mtime":1608649720462,"results":"41","hashOfConfig":"24"},{"size":582,"mtime":1608281316393,"results":"42","hashOfConfig":"24"},{"size":1532,"mtime":1608642565123,"results":"43","hashOfConfig":"24"},{"size":1640,"mtime":1609241878221,"results":"44","hashOfConfig":"24"},{"size":3016,"mtime":1609236873732,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"k6o521",{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/index.js",[],["95","96"],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/App.js",["97"],"import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { commerce } from './lib/commerce';\r\nimport { Products, Navbar, Cart, Checkout } from './components';\r\n\r\nfunction App() {\r\n    const [products, setProducts] = useState([]);\r\n    const [cart, setCart] = useState({});\r\n    const [order, setOrder] = useState({});\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    \r\n    const fetchProducts = async () => {\r\n        try {\r\n            const { data } = await commerce.products.list();\r\n            setProducts(data);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const fetchCart = async () => {\r\n        try {\r\n            const response = await commerce.cart.retrieve();\r\n            setCart(response);\r\n        } catch (error) {\r\n            console.log(error)            \r\n        }\r\n    }\r\n\r\n    const handleAddToCart = async (productId, quantity) => {\r\n        const { cart } = await commerce.cart.add(productId, quantity);\r\n        setCart(cart);        \r\n    }\r\n\r\n    const handleUpdateCartQuantity = async (productId, quantity) => {\r\n        try {\r\n            const { cart } = await commerce.cart.update(productId, { quantity });\r\n            setCart(cart);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const handleRemoveFromCart = async (productId) => {\r\n        try {\r\n            const { cart } = await commerce.cart.remove(productId);\r\n            setCart(cart);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const handleEmptyCart = async () => {\r\n        try {\r\n            const { cart } = await commerce.cart.empty();\r\n            setCart(cart)\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const refreshCart = async () => {\r\n        const newCart = await commerce.cart.refresh();\r\n        setCart(newCart);\r\n    }\r\n\r\n    const handleStripeCaptureCheckout = async (checkoutTokenId, newOrder, paymentGateway) => {\r\n        console.log({\r\n            ...newOrder, \r\n            payment: { ...paymentGateway }\r\n        })\r\n        try {            \r\n            const incomingOrder = await commerce.checkout.capture(checkoutTokenId, {\r\n                ...newOrder, \r\n                payment: { ...paymentGateway }\r\n            });\r\n            setOrder(incomingOrder);            \r\n\r\n            refreshCart();\r\n        } catch (error) {   \r\n            console.log(error)         \r\n            setErrorMessage(error.data.error.message);\r\n        }\r\n    }\r\n    \r\n    const handlePaypalCaptureCheckout = async (checkoutTokenId, newOrder, amount, moveToNextStep) => {\r\n        const getPaypalPaymentId = async (orderDetails) => {\r\n            try {\r\n                const paypalAuth = await commerce.checkout.capture(checkoutTokenId, {\r\n                    ...orderDetails,\r\n                    payment: {\r\n                        gateway: 'paypal',\r\n                        paypal: {\r\n                            action: 'authorize'\r\n                        }\r\n                    }\r\n                });\r\n                renderPaypalButton(orderDetails, paypalAuth);\r\n            } catch (e) {   \r\n                setErrorMessage(e.data.error.message);         \r\n                console.log(e)\r\n            }               \r\n        } \r\n    \r\n        const renderPaypalButton = (orderData, paypalAuth) => {\r\n            console.log(window.paypal);\r\n            try {\r\n                window.paypal.Buttons({\r\n                    env: 'sandbox',\r\n                    commit: true,\r\n                    createOrder: (data, actions) => {\r\n                        return actions.order.create({\r\n                            intent: \"CAPTURE\",\r\n                            purchase_units: [\r\n                                {\r\n                                    description: \"Your description\",\r\n                                    amount: {\r\n                                        currency_code: \"USD\",\r\n                                        value: amount,\r\n                                    },\r\n                                },\r\n                            ],\r\n                        });\r\n                    },                                \r\n                    onCancel: function(data, actions) {\r\n                        console.log('oops')                    \r\n                    },\r\n                    onApprove: async (data, actions) => {                    \r\n                        const order = await actions.order.capture();                    \r\n                        captureOrder(orderData, order, paypalAuth)                   \r\n                    },\r\n                    onError: (err) => {                  \r\n                        console.error(err);\r\n                    },\r\n                }).render('#paypal-button');\r\n            } catch (e) {\r\n                setErrorMessage(e.data.error.message);\r\n                console.log(e);\r\n            }\r\n        }        \r\n    \r\n        const captureOrder = async (orderDetails, data, auth) => {\r\n            try {            \r\n                await commerce.checkout.capture(checkoutTokenId, {\r\n                    ...orderDetails,\r\n                    payment: {\r\n                        gateway: 'paypal',\r\n                        paypal: {\r\n                            action: 'capture',                        \r\n                            payment_id: auth.payment_id,\r\n                            payer_id: data.payer.payer_id\r\n                        }\r\n                    }\r\n                })            \r\n                setOrder(orderDetails);                \r\n            } catch (e) {\r\n                setErrorMessage(e.data.error.message);\r\n                console.log(e);\r\n            }        \r\n            moveToNextStep();\r\n        }\r\n        getPaypalPaymentId(newOrder);\r\n    }\r\n    \r\n    \r\n\r\n    const handleResetError = () => {\r\n        setErrorMessage('');\r\n    }    \r\n\r\n    const handleDeleteCart = async () => {\r\n        try {\r\n            const response = await commerce.cart.delete();\r\n            console.log(response);\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchProducts();\r\n        // handleDeleteCart();\r\n        fetchCart();\r\n    }, []);\r\n\r\n    return (        \r\n        <Router>\r\n            <div>\r\n                <Navbar totalItems={cart.total_items} />\r\n                <Switch>\r\n                    <Route exact path='/'>                    \r\n                        <Products products={products} onAddToCart={handleAddToCart} /> \r\n                    </Route>\r\n                    <Route exact path='/cart'>\r\n                        <Cart \r\n                            cart={cart} \r\n                            onUpdateCartQuantity={handleUpdateCartQuantity}\r\n                            onRemoveFromCart={handleRemoveFromCart}\r\n                            onEmptyCart={handleEmptyCart}\r\n                        />        \r\n                    </Route>\r\n                    <Route exact path='/checkout'>\r\n                        <Checkout\r\n                            cart={cart} \r\n                            order={order}\r\n                            onStripeCaptureCheckout={handleStripeCaptureCheckout}\r\n                            onPaypalCaptureCheckout={handlePaypalCaptureCheckout}\r\n                            error={errorMessage}      \r\n                            onResetError={handleResetError}                      \r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            </div> \r\n        </Router>                    \r\n    )\r\n}\r\n\r\nexport default App;","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/lib/commerce.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/index.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Navbar/Navbar.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Checkout/Checkout.jsx",["98"],"import React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Paper, Stepper, Step, StepLabel, Typography, CircularProgress, Divider, Button, CssBaseline } from '@material-ui/core';\r\nimport useStyles from './styles';\r\nimport { commerce } from '../../../lib/commerce';\r\nimport AddressForm from '../AddressForm';\r\nimport PaymentForm from '../PaymentForm';\r\n\r\nfunction Checkout({ cart, order, onStripeCaptureCheckout, onPaypalCaptureCheckout, error, onResetError }) {\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [checkoutToken, setCheckoutToken] = useState(null);\r\n    const [shippingData, setShippingData] = useState({});\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const steps = ['Shipping Address', 'Payment Details'];\r\n\r\n    let Confirmation = () => order.customer ? (\r\n        <>\r\n            <Typography variant='h5'>Thank you for your purchase, {order.customer.firstname} {order.customer.lastname}</Typography>\r\n            <Divider className={classes.divider} />\r\n            <Typography variant='subtitle2'>Order ref: {order.customer_reference}</Typography>\r\n            <br />\r\n            <Button component={Link} to='/' variant='outlined' type='button' onClick={onResetError}>Back to home</Button>\r\n        </>\r\n    ) : (\r\n        <div className={classes.spinner}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n\r\n    if (error) {\r\n        Confirmation = () => (\r\n            <>\r\n                <Typography variant='h5'>Error {error}</Typography>\r\n                <br />\r\n                <Button component={Link} to='/' variant='outlined' type='button' onClick={onResetError}>Back to home</Button>\r\n            </>\r\n        ); \r\n    }     \r\n\r\n    const nextStep = () => setActiveStep((prevStep) => prevStep + 1);\r\n    const backStep = () => setActiveStep((prevStep) => prevStep - 1);\r\n\r\n    const next = (data) => {\r\n        setShippingData(data);\r\n        nextStep();\r\n    }    \r\n\r\n    const Form = () => (activeStep === 0) ? <AddressForm                                                 \r\n                                                checkoutToken={checkoutToken}\r\n                                                next={next} \r\n                                            /> : <PaymentForm \r\n                                                     shippingData={shippingData} \r\n                                                     checkoutToken={checkoutToken}\r\n                                                     nextStep={nextStep} \r\n                                                     backStep={backStep} \r\n                                                     onStripeCaptureCheckout={onStripeCaptureCheckout}\r\n                                                     onPaypalCaptureCheckout={onPaypalCaptureCheckout}                                                      \r\n                                                 />;\r\n\r\n    useEffect(() => {\r\n        const generateToken = async () => {\r\n            try {                \r\n                const token = await commerce.checkout.generateToken(cart.id, { type: 'cart' });                \r\n                setCheckoutToken(token);\r\n            } catch(error) {\r\n                history.push('/');                \r\n            }\r\n        }\r\n\r\n        generateToken();\r\n    }, []);\r\n\r\n    return (        \r\n        <>\r\n            <CssBaseline />\r\n            <div className={classes.toolbar} />\r\n            <main className={classes.layout}>\r\n                <Paper className={classes.paper}>\r\n                    <Typography variant='h4' align='center'>Checkout</Typography>\r\n                    <Stepper activeStep={activeStep} className={classes.stepper}>\r\n                        {steps.map((step) => (\r\n                            <Step>\r\n                                <StepLabel>{step}</StepLabel>\r\n                            </Step>\r\n                        ))}\r\n                    </Stepper>\r\n                    {activeStep === steps.length ? <Confirmation /> : checkoutToken && <Form />}\r\n                </Paper>\r\n            </main>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Checkout;","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Products.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/Cart.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Navbar/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Checkout/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/PaymentForm.jsx",["99"],"import React, { useState, useEffect } from 'react';\r\nimport { Typography, Divider, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { commerce } from '../../lib/commerce';\r\nimport Review from './Review';\r\nimport ReactPaypal from './ReactPaypal/ReactPaypal';\r\nimport ReactStripe from './ReactStripe/ReactStripe';\r\n\r\nfunction PaymentForm({shippingData, checkoutToken, nextStep, backStep, onStripeCaptureCheckout, onPaypalCaptureCheckout }) {       \r\n    const [shippingInfo, setShippingInfo] = useState({});       \r\n    const [option, setOption] = useState('');\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 150\r\n        }\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    const PaymentMethod = () => {\r\n        if (option === 'paypal') {\r\n            return <ReactPaypal \r\n                shippingData={shippingData}\r\n                checkoutToken={checkoutToken}                \r\n                amount={(checkoutToken.live.subtotal.raw + shippingInfo.price.raw).toFixed(2).toString()}\r\n                nextStep={nextStep}\r\n                backStep={backStep}\r\n                onPaypalCaptureCheckout={onPaypalCaptureCheckout}                \r\n            />\r\n        } else if (option === 'bank card') {\r\n            return <ReactStripe              \r\n                shippingData={shippingData}  \r\n                checkoutToken={checkoutToken}                \r\n                amount={(checkoutToken.live.subtotal.raw + shippingInfo.price.raw).toFixed(2).toString()}\r\n                nextStep={nextStep}\r\n                backStep={backStep}\r\n                onStripeCaptureCheckout={onStripeCaptureCheckout} \r\n            />\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const data = await commerce.checkout.checkShippingOption(checkoutToken.id, {\r\n                    shipping_option_id: shippingData.shippingOption,\r\n                    country: shippingData.shippingCountry,\r\n                    region: shippingData.shippingSubdivision\r\n                });            \r\n                setShippingInfo(data);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    if (!Object.keys(shippingInfo).length) return null;\r\n    \r\n    return (\r\n        <>\r\n            <Review checkoutToken={checkoutToken} shippingData={shippingData} shippingInfo={shippingInfo} />\r\n            <Divider />\r\n            <Typography variant='h6' style={{margin: '20px 0'}} gutterBottom>Choose a payment method</Typography>            \r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id='payment method'>Payment method</InputLabel>\r\n                <Select labelId='payment method' id='payment method' onChange={(e) => setOption(e.target.value)}>\r\n                    <MenuItem value='paypal'>Paypal</MenuItem>\r\n                    <MenuItem value='bank card'>Bank Card</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <br /><br />\r\n            <br />\r\n\r\n            {option ? <PaymentMethod /> : ''}            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default PaymentForm;","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/CartItem/CartItem.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/AddressForm.jsx",["100","101"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { InputLabel, Select, MenuItem, Button, Grid, Typography } from '@material-ui/core';\r\nimport { useForm, FormProvider } from 'react-hook-form';\r\nimport { commerce } from '../../lib/commerce';\r\nimport FormInput from './FormInput';\r\n\r\nfunction AddressForm({ checkoutToken, next }) {\r\n    const [shippingCountries, setShippingCountries] = useState([]);\r\n    const [shippingCountry, setShippingCountry] = useState('');\r\n    const [shippingSubdivisions, setShippingSubdivisions] = useState([]);\r\n    const [shippingSubdivision, setShippingSubdivision] = useState('');\r\n    const [shippingOptions, setShippingOptions] = useState([]);\r\n    const [shippingOption, setShippingOption] = useState('');\r\n    const methods = useForm();\r\n    \r\n    const fetchShippingCountries = async (checkoutTokenId) => {\r\n        try {\r\n            const { countries } = await commerce.services.localeListShippingCountries(checkoutTokenId);\r\n            setShippingCountries(countries);\r\n            setShippingCountry(Object.keys(countries)[0]);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const fetchSubdivisions = async (countryCode) => {\r\n        try {\r\n            const { subdivisions } = await commerce.services.localeListSubdivisions(countryCode);\r\n            setShippingSubdivisions(subdivisions);\r\n            setShippingSubdivision(Object.keys(subdivisions)[0]);\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const fetchShippingOptions = async (checkoutTokenId, country, region = null) => {\r\n        try {\r\n            const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country , region });            \r\n            setShippingOptions(options);\r\n            setShippingOption(options[0].id);\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchShippingCountries(checkoutToken.id);        \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (shippingCountry) fetchSubdivisions(shippingCountry);\r\n    }, [shippingCountry]);\r\n\r\n    useEffect(() => {\r\n        if (shippingSubdivision) fetchShippingOptions(checkoutToken.id, shippingCountry, shippingSubdivision);\r\n    }, [shippingSubdivision]);\r\n\r\n    return (\r\n        <>            \r\n            <Typography variant='h6' gutterBottom>Shipping Address</Typography>\r\n            <FormProvider {...methods}>\r\n                <form onSubmit={methods.handleSubmit((data) => next({ ...data, shippingCountry, shippingSubdivision, shippingOption }))}>\r\n                    <Grid container spacing={3}>\r\n                        <FormInput name='firstName' label='First name' />\r\n                        <FormInput name='lastName' label='Last name' />\r\n                        <FormInput name='address1' label='Address' />\r\n                        <FormInput name='email' label='Email' />\r\n                        <FormInput name='city' label='City' />\r\n                        <FormInput name='zip' label='ZIP/Postal code' />\r\n                        <Grid item xs={12} sm={6}>\r\n                            <InputLabel>Shipping Countries</InputLabel>\r\n                            <Select value={shippingCountry} fullWidth onChange={(e) => setShippingCountry(e.target.value)}>\r\n                                {Object.entries(shippingCountries).map(([code, name]) => (\r\n                                    <MenuItem key={code} value={code}>\r\n                                        {name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </Grid>                             \r\n                        <Grid item xs={12} sm={6}>\r\n                            <InputLabel>Shipping Subdivision</InputLabel>\r\n                            <Select value={shippingSubdivision} fullWidth onChange={(e) => setShippingSubdivision(e.target.value)}>\r\n                                {Object.entries(shippingSubdivisions).map(([code, name]) => (\r\n                                    <MenuItem key={code} value={code}>\r\n                                        {name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </Grid> \r\n                        <Grid item xs={12} sm={6}>\r\n                            <InputLabel>Shipping Options</InputLabel>\r\n                            <Select value={shippingOption} fullWidth onChange={(e) => setShippingOption(e.target.value)}>\r\n                                {shippingOptions.map((option) => (\r\n                                    <MenuItem key={option.id} value={option.id}>\r\n                                        {option.description} - {option.price.formatted_with_symbol}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </Grid> \r\n                    </Grid>   \r\n                    <br />\r\n                    <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                        <Button component={Link} to='/cart' variant='outlined'>Back to cart</Button>\r\n                        <Button type='submit' variant='contained' color='primary'>Next</Button>\r\n                    </div>                 \r\n                </form>\r\n            </FormProvider>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AddressForm;","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Product/Product.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Product/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/CartItem/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/FormInput.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Review.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/ReactPaypal/ReactPaypal.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/ReactStripe/ReactStripe.jsx",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":171,"column":11,"nodeType":"108","messageId":"109","endLine":171,"endColumn":27},{"ruleId":"110","severity":1,"message":"111","line":73,"column":8,"nodeType":"112","endLine":73,"endColumn":10,"suggestions":"113"},{"ruleId":"110","severity":1,"message":"114","line":57,"column":8,"nodeType":"112","endLine":57,"endColumn":10,"suggestions":"115"},{"ruleId":"110","severity":1,"message":"116","line":49,"column":8,"nodeType":"112","endLine":49,"endColumn":10,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"118","line":57,"column":8,"nodeType":"112","endLine":57,"endColumn":29,"suggestions":"119"},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'handleDeleteCart' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cart.id' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["122"],"React Hook useEffect has missing dependencies: 'checkoutToken.id', 'shippingData.shippingCountry', 'shippingData.shippingOption', and 'shippingData.shippingSubdivision'. Either include them or remove the dependency array.",["123"],"React Hook useEffect has a missing dependency: 'checkoutToken.id'. Either include it or remove the dependency array.",["124"],"React Hook useEffect has missing dependencies: 'checkoutToken.id' and 'shippingCountry'. Either include them or remove the dependency array.",["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [cart.id, history]",{"range":"134","text":"135"},"Update the dependencies array to be: [checkoutToken.id, shippingData.shippingCountry, shippingData.shippingOption, shippingData.shippingSubdivision]",{"range":"136","text":"137"},"Update the dependencies array to be: [checkoutToken.id]",{"range":"138","text":"139"},"Update the dependencies array to be: [checkoutToken.id, shippingCountry, shippingSubdivision]",{"range":"140","text":"141"},[3360,3362],"[cart.id, history]",[2348,2350],"[checkoutToken.id, shippingData.shippingCountry, shippingData.shippingOption, shippingData.shippingSubdivision]",[2056,2058],"[checkoutToken.id]",[2325,2346],"[checkoutToken.id, shippingCountry, shippingSubdivision]"]