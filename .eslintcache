[{"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/index.js":"1","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/App.js":"2","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/lib/commerce.js":"3","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/index.js":"4","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Navbar/Navbar.jsx":"5","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Checkout/Checkout.jsx":"6","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Products.jsx":"7","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/Cart.jsx":"8","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Navbar/styles.js":"9","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/styles.js":"10","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/styles.js":"11","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Checkout/styles.js":"12","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/PaymentForm.jsx":"13","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/CartItem/CartItem.jsx":"14","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/AddressForm.jsx":"15","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Product/Product.jsx":"16","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Product/styles.js":"17","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/CartItem/styles.js":"18","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/FormInput.jsx":"19","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Review.jsx":"20"},{"size":149,"mtime":1607763406891,"results":"21","hashOfConfig":"22"},{"size":4082,"mtime":1609228819193,"results":"23","hashOfConfig":"22"},{"size":127,"mtime":1607848912479,"results":"24","hashOfConfig":"22"},{"size":227,"mtime":1608107864663,"results":"25","hashOfConfig":"22"},{"size":1499,"mtime":1608023171300,"results":"26","hashOfConfig":"22"},{"size":4006,"mtime":1609228819327,"results":"27","hashOfConfig":"22"},{"size":740,"mtime":1607933801411,"results":"28","hashOfConfig":"22"},{"size":2123,"mtime":1608649781598,"results":"29","hashOfConfig":"22"},{"size":1631,"mtime":1607770732801,"results":"30","hashOfConfig":"22"},{"size":856,"mtime":1608649948513,"results":"31","hashOfConfig":"22"},{"size":298,"mtime":1607772706472,"results":"32","hashOfConfig":"22"},{"size":1350,"mtime":1608107650025,"results":"33","hashOfConfig":"22"},{"size":4744,"mtime":1609228819572,"results":"34","hashOfConfig":"22"},{"size":1376,"mtime":1608649039520,"results":"35","hashOfConfig":"22"},{"size":5561,"mtime":1608324160096,"results":"36","hashOfConfig":"22"},{"size":1404,"mtime":1608648595150,"results":"37","hashOfConfig":"22"},{"size":786,"mtime":1608648543844,"results":"38","hashOfConfig":"22"},{"size":689,"mtime":1608649720462,"results":"39","hashOfConfig":"22"},{"size":582,"mtime":1608281316393,"results":"40","hashOfConfig":"22"},{"size":1532,"mtime":1608642565123,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"k6o521",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/index.js",[],["86","87"],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/App.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/lib/commerce.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/index.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Navbar/Navbar.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Checkout/Checkout.jsx",["88"],"import React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Paper, Stepper, Step, StepLabel, Typography, CircularProgress, Divider, Button, CssBaseline } from '@material-ui/core';\r\nimport useStyles from './styles';\r\nimport { commerce } from '../../../lib/commerce';\r\nimport AddressForm from '../AddressForm';\r\nimport PaymentForm from '../PaymentForm';\r\n\r\nfunction Checkout({ cart, order, onStripeCaptureCheckout, onPaypalCaptureCheckout, error, onResetError, onSetErrorMessage, onSetOrder }) {\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [checkoutToken, setCheckoutToken] = useState(null);\r\n    const [shippingData, setShippingData] = useState({});\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const steps = ['Shipping Address', 'Payment Details'];\r\n\r\n    let Confirmation = () => order.customer ? (\r\n        <>\r\n            <Typography variant='h5'>Thank you for your purchase, {order.customer.firstname} {order.customer.lastname}</Typography>\r\n            <Divider className={classes.divider} />\r\n            <Typography variant='subtitle2'>Order ref: {order.customer_reference}</Typography>\r\n            <br />\r\n            <Button component={Link} to='/' variant='outlined' type='button' onClick={onResetError}>Back to home</Button>\r\n        </>\r\n    ) : (\r\n        <div className={classes.spinner}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n\r\n    if (error) {\r\n        Confirmation = () => (\r\n            <>\r\n                <Typography variant='h5'>Error {error}</Typography>\r\n                <br />\r\n                <Button component={Link} to='/' variant='outlined' type='button' onClick={onResetError}>Back to home</Button>\r\n            </>\r\n        ); \r\n    }     \r\n\r\n    const nextStep = () => setActiveStep((prevStep) => prevStep + 1);\r\n    const backStep = () => setActiveStep((prevStep) => prevStep - 1);\r\n\r\n    const next = (data) => {\r\n        setShippingData(data);\r\n        nextStep();\r\n    }    \r\n\r\n    const Form = () => (activeStep === 0) ? <AddressForm                                                 \r\n                                                checkoutToken={checkoutToken}\r\n                                                next={next} \r\n                                            /> : <PaymentForm \r\n                                                     shippingData={shippingData} \r\n                                                     checkoutToken={checkoutToken}\r\n                                                     nextStep={nextStep} \r\n                                                     backStep={backStep} \r\n                                                     onStripeCaptureCheckout={onStripeCaptureCheckout}\r\n                                                     onPaypalCaptureCheckout={onPaypalCaptureCheckout} \r\n                                                     onSetErrorMessage={onSetErrorMessage}\r\n                                                     onSetOrder={onSetOrder}\r\n                                                 />;\r\n\r\n    useEffect(() => {\r\n        const generateToken = async () => {\r\n            try {                \r\n                const token = await commerce.checkout.generateToken(cart.id, { type: 'cart' });                \r\n                setCheckoutToken(token);\r\n            } catch(error) {\r\n                history.push('/');                \r\n            }\r\n        }\r\n\r\n        generateToken();\r\n    // }, [cart.id]);\r\n    }, []);\r\n\r\n    return (        \r\n        <>\r\n            <CssBaseline />\r\n            <div className={classes.toolbar} />\r\n            <main className={classes.layout}>\r\n                <Paper className={classes.paper}>\r\n                    <Typography variant='h4' align='center'>Checkout</Typography>\r\n                    <Stepper activeStep={activeStep} className={classes.stepper}>\r\n                        {steps.map((step) => (\r\n                            <Step>\r\n                                <StepLabel>{step}</StepLabel>\r\n                            </Step>\r\n                        ))}\r\n                    </Stepper>\r\n                    {activeStep === steps.length ? <Confirmation /> : checkoutToken && <Form />}\r\n                </Paper>\r\n            </main>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Checkout;","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Products.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/Cart.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Navbar/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Checkout/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/PaymentForm.jsx",["89"],"import React, { useState, useEffect } from 'react';\r\nimport { Typography, Button, Divider, TextInput } from '@material-ui/core';\r\nimport {commerce} from '../../lib/commerce';\r\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport Review from './Review';\r\n\r\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\r\n\r\nfunction PaymentForm({shippingData, checkoutToken, nextStep, backStep, onCaptureCheckout }) {       \r\n    const [shippingInfo, setShippingInfo] = useState({});\r\n\r\n    const Payment = () => {\r\n        const stripe = useStripe();\r\n        const elements = useElements();\r\n\r\n        const handleSubmit = async (event, elements, stripe) => {\r\n            event.preventDefault();\r\n    \r\n            if (!elements || !stripe) return;\r\n    \r\n            const cardElement = elements.getElement(CardElement);\r\n    \r\n            try {\r\n                const { error, paymentMethod } = await stripe.createPaymentMethod({ type: 'card', card: cardElement });\r\n                if (error) throw error;            \r\n    \r\n                const orderData = {\r\n                    line_items: checkoutToken.live.line_items,\r\n                    customer: {\r\n                        firstname: shippingData.firstName,\r\n                        lastname: shippingData.lastName,\r\n                        email: shippingData.email\r\n                    },\r\n                    shipping: {\r\n                        name: 'Primary',\r\n                        street: shippingData.address1,\r\n                        town_city: shippingData.city,\r\n                        county_state: shippingData.shippingSubdivision,\r\n                        postal_zip_code: shippingData.zip,\r\n                        country: shippingData.shippingCountry\r\n                    },\r\n                    fulfillment: {\r\n                        shipping_method: shippingData.shippingOption\r\n                    },                    \r\n                }            \r\n                \r\n                onCaptureCheckout(checkoutToken.id, orderData, {\r\n                    gateway: 'stripe',\r\n                    stripe: {\r\n                        payment_method_id: paymentMethod.id\r\n                    }\r\n                });\r\n                nextStep();\r\n    \r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n    \r\n        }\r\n\r\n        return (\r\n            <form onSubmit={(e) => handleSubmit(e, elements, stripe)}>\r\n                <CardElement />\r\n                <br /> <br />\r\n                <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                    <Button variant='outlined' onClick={backStep}>Back</Button>\r\n                    <Button type='submit' variant='contained' disabled={!stripe} color='primary'>\r\n                        Pay ${(checkoutToken.live.subtotal.raw + shippingInfo.price.raw).toFixed(2).toString()}\r\n                    </Button>\r\n                </div>\r\n            </form> \r\n        )\r\n    }\r\n\r\n    const handlePayment = async (e) => {\r\n        try {\r\n            const payplayAuth = await commerce.checkout.capture(checkoutToken.id, orderData, {\r\n                gateway: 'paypal',\r\n                paypal: {\r\n                    action: 'authorize'\r\n                }\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    const Paypal = () => (\r\n        <>\r\n            <form onSubmit={handlePayment}>\r\n                <TextInput name='email' label='email' />\r\n                <Button variant='contained' color='primary'>Pay with Paypal</Button>\r\n            </form>\r\n        </>\r\n    )\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const data = await commerce.checkout.checkShippingOption(checkoutToken.id, {\r\n                    shipping_option_id: shippingData.shippingOption,\r\n                    country: shippingData.shippingCountry,\r\n                    region: shippingData.shippingSubdivision\r\n                });            \r\n                setShippingInfo(data);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    if (!Object.keys(shippingInfo).length) return null;\r\n    \r\n    return (\r\n        <>\r\n            <Review checkoutToken={checkoutToken} shippingData={shippingData} shippingInfo={shippingInfo} />\r\n            <Divider />\r\n            <Typography variant='h6' style={{margin: '20px 0'}} gutterBottom>Payment method</Typography>\r\n            <Paypal />\r\n            <Elements stripe={stripePromise}>\r\n                <Payment />\r\n            </Elements>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PaymentForm;","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/CartItem/CartItem.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/AddressForm.jsx",["90","91"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { InputLabel, Select, MenuItem, Button, Grid, Typography } from '@material-ui/core';\r\nimport { useForm, FormProvider } from 'react-hook-form';\r\nimport { commerce } from '../../lib/commerce';\r\nimport FormInput from './FormInput';\r\n\r\nfunction AddressForm({ checkoutToken, next }) {\r\n    const [shippingCountries, setShippingCountries] = useState([]);\r\n    const [shippingCountry, setShippingCountry] = useState('');\r\n    const [shippingSubdivisions, setShippingSubdivisions] = useState([]);\r\n    const [shippingSubdivision, setShippingSubdivision] = useState('');\r\n    const [shippingOptions, setShippingOptions] = useState([]);\r\n    const [shippingOption, setShippingOption] = useState('');\r\n    const methods = useForm();\r\n    \r\n    const fetchShippingCountries = async (checkoutTokenId) => {\r\n        try {\r\n            const { countries } = await commerce.services.localeListShippingCountries(checkoutTokenId);\r\n            setShippingCountries(countries);\r\n            setShippingCountry(Object.keys(countries)[0]);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const fetchSubdivisions = async (countryCode) => {\r\n        try {\r\n            const { subdivisions } = await commerce.services.localeListSubdivisions(countryCode);\r\n            setShippingSubdivisions(subdivisions);\r\n            setShippingSubdivision(Object.keys(subdivisions)[0]);\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const fetchShippingOptions = async (checkoutTokenId, country, region = null) => {\r\n        try {\r\n            const options = await commerce.checkout.getShippingOptions(checkoutTokenId, { country , region });            \r\n            setShippingOptions(options);\r\n            setShippingOption(options[0].id);\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchShippingCountries(checkoutToken.id);        \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (shippingCountry) fetchSubdivisions(shippingCountry);\r\n    }, [shippingCountry]);\r\n\r\n    useEffect(() => {\r\n        if (shippingSubdivision) fetchShippingOptions(checkoutToken.id, shippingCountry, shippingSubdivision);\r\n    }, [shippingSubdivision]);\r\n\r\n    return (\r\n        <>            \r\n            <Typography variant='h6' gutterBottom>Shipping Address</Typography>\r\n            <FormProvider {...methods}>\r\n                <form onSubmit={methods.handleSubmit((data) => next({ ...data, shippingCountry, shippingSubdivision, shippingOption }))}>\r\n                    <Grid container spacing={3}>\r\n                        <FormInput name='firstName' label='First name' />\r\n                        <FormInput name='lastName' label='Last name' />\r\n                        <FormInput name='address1' label='Address' />\r\n                        <FormInput name='email' label='Email' />\r\n                        <FormInput name='city' label='City' />\r\n                        <FormInput name='zip' label='ZIP/Postal code' />\r\n                        <Grid item xs={12} sm={6}>\r\n                            <InputLabel>Shipping Countries</InputLabel>\r\n                            <Select value={shippingCountry} fullWidth onChange={(e) => setShippingCountry(e.target.value)}>\r\n                                {Object.entries(shippingCountries).map(([code, name]) => (\r\n                                    <MenuItem key={code} value={code}>\r\n                                        {name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </Grid>                             \r\n                        <Grid item xs={12} sm={6}>\r\n                            <InputLabel>Shipping Subdivision</InputLabel>\r\n                            <Select value={shippingSubdivision} fullWidth onChange={(e) => setShippingSubdivision(e.target.value)}>\r\n                                {Object.entries(shippingSubdivisions).map(([code, name]) => (\r\n                                    <MenuItem key={code} value={code}>\r\n                                        {name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </Grid> \r\n                        <Grid item xs={12} sm={6}>\r\n                            <InputLabel>Shipping Options</InputLabel>\r\n                            <Select value={shippingOption} fullWidth onChange={(e) => setShippingOption(e.target.value)}>\r\n                                {shippingOptions.map((option) => (\r\n                                    <MenuItem key={option.id} value={option.id}>\r\n                                        {option.description} - {option.price.formatted_with_symbol}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </Grid> \r\n                    </Grid>   \r\n                    <br />\r\n                    <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                        <Button component={Link} to='/cart' variant='outlined'>Back to cart</Button>\r\n                        <Button type='submit' variant='contained' color='primary'>Next</Button>\r\n                    </div>                 \r\n                </form>\r\n            </FormProvider>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AddressForm;","/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Product/Product.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Products/Product/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/Cart/CartItem/styles.js",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/FormInput.jsx",[],"/mnt/c/Users/pc/Desktop/My projects/e-commerce/src/components/CheckoutForm/Review.jsx",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":76,"column":8,"nodeType":"98","endLine":76,"endColumn":10,"suggestions":"99"},{"ruleId":"96","severity":1,"message":"100","line":49,"column":8,"nodeType":"98","endLine":49,"endColumn":10,"suggestions":"101"},{"ruleId":"96","severity":1,"message":"102","line":49,"column":8,"nodeType":"98","endLine":49,"endColumn":10,"suggestions":"103"},{"ruleId":"96","severity":1,"message":"104","line":57,"column":8,"nodeType":"98","endLine":57,"endColumn":29,"suggestions":"105"},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cart.id' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["108"],"React Hook useEffect has missing dependencies: 'checkoutToken.id', 'shippingData.shippingCountry', 'shippingData.shippingOption', and 'shippingData.shippingSubdivision'. Either include them or remove the dependency array.",["109"],"React Hook useEffect has a missing dependency: 'checkoutToken.id'. Either include it or remove the dependency array.",["110"],"React Hook useEffect has missing dependencies: 'checkoutToken.id' and 'shippingCountry'. Either include them or remove the dependency array.",["111"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [cart.id, history]",{"range":"120","text":"121"},"Update the dependencies array to be: [checkoutToken.id, shippingData.shippingCountry, shippingData.shippingOption, shippingData.shippingSubdivision]",{"range":"122","text":"123"},"Update the dependencies array to be: [checkoutToken.id]",{"range":"124","text":"125"},"Update the dependencies array to be: [checkoutToken.id, shippingCountry, shippingSubdivision]",{"range":"126","text":"127"},[3531,3533],"[cart.id, history]",[2072,2074],"[checkoutToken.id, shippingData.shippingCountry, shippingData.shippingOption, shippingData.shippingSubdivision]",[2056,2058],"[checkoutToken.id]",[2325,2346],"[checkoutToken.id, shippingCountry, shippingSubdivision]"]